/**
\mainpage accelerInt

\section purpose What is the purpose of accelerInt?

<code>accelerInt</code> is a ODE integration library for the CPU and GPU (future versions will support other SIMD devices)
containing several [validated](https://arxiv.org/abs/1607.03884) stiff-ODE solvers.
<code>accelerInt</code> has primarily been used with the python tool [pyJac](https://github.com/SLACKHA/pyJac) to enable
chemical kinetic integration, however it aims to be usable for general purpose ODE integration.

<code>accelerInt</code> is currently in **beta** form.  We welcome any and all feedback on improving usability,
documentation, examples or functionality. If you have any comments, concerns or issues, please get in contact
via our [github repo](https://github.com/SLACKHA/accelerInt).

\section integrators Currently available Integrators

A number of stiff integration methods are available in <code>accelerInt</code> on both the CPU and GPU:

| Integrator                        | Type            | Order       | CPU | GPU |
|:------------------------|:--------------------------|:----------------------|:---:|:---:|
| CVODE<sup>1</sup>       | Implicit VODE             | Variable (Max 5th)    |  X  | --  |
| Radau-IIa<sup>2</sup>   | Implicit RK               | 5th                   |  X  |  X  |
| EXP4<sup>3</sup>        | Semi-implicit Exponential | Nominally 4th         |  X  |  X  |
| EXPRB43<sup>4</sup>     | Semi-implicit Exponential | 4th                   |  X  |  X  |

1.  A. C. Hindmarsh, P. N. Brown, K. E. Grant, S. L. Lee, R. Serban, D. E. Shumaker, C. S. Woodward, SUNDIALS: Suite of nonlinear and differential/algebraic equation solvers, ACMT. Math. Softw. 31 (3) (2005) 363–396. [doi:10.1145/1089014.1089020](https://doi.org/10.1145/1089014.1089020).
2.  G. Wanner, E. Hairer, Solving Ordinary Differential Equations II: Stiff and Differential Algebraic Problems, 2nd Edition, Springer-Verlag, Berlin, 1996. [doi:10.1007/978-3-642-05221-7](https://doi.org/10.1007/978-3-642-05221-7).
3.  M. Hochbruck, C. Lubich, H. Selhofer, Exponential integrators for large systems of differential equations, SIAM J. Sci. Comput. 19 (5) (1998) 1552–1574. [doi:10.1137/S1064827595295337](https://doi.org/10.1137/S1064827595295337)
4.  M. Hochbruck, A. Ostermann, J. Schweitzer, Exponential Rosenbrock-type methods, SIAM J. Numer. Anal. 47 (1) (2009) 786–803. [doi:10.1137/080717717](https://doi.org/10.1137/080717717).

\section install Compilation and Dependencies

<code>accelerInt</code> is a collection of C and CUDA-C code compiled via [SCons](http://scons.org/).
We again encourage feedback on the compilation process as it has not been widely tested.

\subsection using_scons Specifying SCons options

SCons is a flexible build system that allows the user to specify many options via the command line controlling the compilation process.  Options may be specified via, e.g:

    scons toolchain=gnu

This will store the specified option (in this case, using the GNU toolchain) in a file `accelerInt.conf`.
Alternatively, this file may be created directly by the user to specify many options.

See \ref scons_opts for a full listing of command line options and their effects.

\subsection deps Dependencies

<code>accelerInt</code> has a number of dependencies required to run:
1.  A working C/C++ compiler
*  *  <code>accelerInt</code> will attempt to find a valid gcc/g++ installation by default.
  Alteratively the 'intel' toolchain can be specified to use icc/icpc, or clang,
  however these are less tested and may require some work to get up and running
2.  A working CUDA installation [Optional]
*  *  <code>accelerInt</code> will attempt to find a valid CUDA installation in a number of common install locations.
  If it cannot be found, the GPU integrators will be turned off.
  To manually specify the CUDA path, the environment (or \ref scons_opts "SCons options") `CUDA_TOOLKIT_PATH` and `CUDA_SDK_PATH` may be set.
3.  CVODE
*  *  A working [Sundials/CVODE](http://computation.llnl.gov/projects/sundials/cvode) installation should be available on
       the `LD_LIBRARY_PATH` or equivalent.
4.  BLAS/LAPACK
*  *  A working BLAS/LAPACK implementation is required for linear algebra routines for the CPU solvers (LU Factorization, Inversion, etc.)
  By default <code>accelerInt</code> looks for [Intel's MKL Library](https://software.intel.com/en-us/intel-mkl),
  however other libraries and directories may be specified via the `blas_lapack_libs` and `blas_lapack_dir` \ref scons_opts "SCons configuration options".
5.  FFTW3
*  *  The [FFTW3](http://www.fftw.org/) library is required to calculate the rational approximants for the Exponential integrators

Disabling solvers based on available libaries is a feature that may be added to future versions.

\section main_mem Memory Format

<code>accelerInt</code> uses a Column-major (Fortran) data formatting scheme, future versions will include optional use of the Row-major (C) data ordering.

For a state vector entry \f$\vec{y} = \{ y_1, y_1, \ldots y_N \}\f$
and IVPs \f$1, 2, \ldots N_{\text{state}}\f$, this equates to storing the state vectors in memory as:

        \f{align}{ \nonumber
           y_{1,1}, y_{1,2},& \ldots y_{1,N_{\text{state}}} \\ \nonumber
           y_{2,1}, y_{2,2},& \ldots y_{2,N_{\text{state}}} \\ \nonumber
           \vdots& \\ \nonumber
           y_{N,1}, y_{N,2},& \ldots y_{N,N_{\text{state}}} \\ \nonumber
        \f}
For a pratical example see the \ref accelerint_indx "van der Pol equation example"
*/